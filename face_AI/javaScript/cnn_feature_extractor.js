/**
 * CNN Feature Extractor
 * M·∫°ng n∆°-ron t√≠ch ch·∫≠p ƒë·ªÉ tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng l√£o h√≥a v√† t·ªïn th∆∞∆°ng m√¥
 * S·ª≠ d·ª•ng TensorFlow.js ƒë·ªÉ ph√¢n t√≠ch khu√¥n m·∫∑t
 */

class CNNFeatureExtractor {
    constructor() {
        this.model = null;
        this.initialized = false;
        
        // C√°c lo·∫°i ƒë·∫∑c tr∆∞ng c·∫ßn tr√≠ch xu·∫•t
        this.featureTypes = {
            // D·∫•u hi·ªáu l√£o h√≥a chung
            aging: {
                wrinkles: 'N·∫øp nhƒÉn',
                sagging: 'Da ch·∫£y x·ªá', 
                spots: 'ƒê·ªëm n√¢u/ƒë·ªëm tu·ªïi',
                texture: 'K·∫øt c·∫•u da th√¥ r√°p',
                pores: 'L·ªó ch√¢n l√¥ng to'
            },
            
            // T·ªïn th∆∞∆°ng do ma t√∫y
            drugDamage: {
                faceSores: 'V·∫øt lo√©t tr√™n m·∫∑t',
                skinPicking: 'V·∫øt c√†o g√£i',
                toothDecay: 'RƒÉng h∆∞ h·ªèng',
                sunkenCheeks: 'M√° h√≥p',
                darkCircles: 'Qu·∫ßng th√¢m m·∫Øt n·∫∑ng',
                paleSkin: 'Da nh·ª£t nh·∫°t b·∫•t th∆∞·ªùng'
            },
            
            // T·ªïn th∆∞∆°ng do r∆∞·ª£u
            alcoholDamage: {
                rosacea: 'M≈©i ƒë·ªè (rhinophyma)',
                spiderVeins: 'M·∫°ch m√°u n·ªïi',
                puffiness: 'S∆∞ng ph√π m·∫∑t',
                jaundice: 'V√†ng da/m·∫Øt',
                redFace: 'M·∫∑t ƒë·ªè l√¢u d√†i',
                brokenCapillaries: 'Mao m·∫°ch v·ª°'
            },
            
            // T·ªïn th∆∞∆°ng do thu·ªëc l√°
            smokingDamage: {
                smokersLines: 'N·∫øp nhƒÉn quanh mi·ªáng',
                yellowTeeth: 'RƒÉng ·ªë v√†ng',
                dullSkin: 'Da x·ªân m√†u',
                leatherySkin: 'Da nh∆∞ da thu·ªôc',
                lipDiscoloration: 'M√¥i th√¢m',
                crowsFeet: 'N·∫øp nhƒÉn ƒëu√¥i m·∫Øt s√¢u'
            }
        };
        
        // Tr·ªçng s·ªë cho t·ª´ng ƒë·∫∑c tr∆∞ng d·ª±a tr√™n th·ªùi gian s·ª≠ d·ª•ng
        this.timeWeights = {
            5: 0.3,   // 5 nƒÉm - t·ªïn th∆∞∆°ng nh·∫π
            10: 0.6,  // 10 nƒÉm - t·ªïn th∆∞∆°ng trung b√¨nh
            15: 0.8,  // 15 nƒÉm - t·ªïn th∆∞∆°ng n·∫∑ng
            20: 1.0   // 20 nƒÉm - t·ªïn th∆∞∆°ng r·∫•t n·∫∑ng
        };
    }
    
    /**
     * Kh·ªüi t·∫°o m√¥ h√¨nh CNN
     */
    async initialize() {
        if (this.initialized) {
            console.log('CNN Feature Extractor ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
            return true;
        }
        
        try {
            console.log('üß† ƒêang kh·ªüi t·∫°o CNN Feature Extractor...');
            
            // Ki·ªÉm tra TensorFlow.js
            if (typeof tf === 'undefined') {
                throw new Error('TensorFlow.js ch∆∞a ƒë∆∞·ª£c t·∫£i');
            }
            
            // T·∫°o m√¥ h√¨nh CNN ƒë∆°n gi·∫£n
            this.model = this.createModel();
            
            // Compile model
            this.model.compile({
                optimizer: tf.train.adam(0.001),
                loss: 'categoricalCrossentropy',
                metrics: ['accuracy']
            });
            
            console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o m√¥ h√¨nh CNN');
            console.log('üìä T·ªïng s·ªë tham s·ªë:', this.model.countParams());
            
            this.initialized = true;
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi kh·ªüi t·∫°o CNN:', error);
            return false;
        }
    }
    
    /**
     * T·∫°o m√¥ h√¨nh CNN
     */
    createModel() {
        const model = tf.sequential();
        
        // Input layer - ·∫£nh 224x224 v·ªõi 3 k√™nh m√†u
        model.add(tf.layers.conv2d({
            inputShape: [224, 224, 3],
            filters: 32,
            kernelSize: 3,
            activation: 'relu',
            padding: 'same'
        }));
        model.add(tf.layers.maxPooling2d({ poolSize: 2 }));
        
        // Hidden layers
        model.add(tf.layers.conv2d({
            filters: 64,
            kernelSize: 3,
            activation: 'relu',
            padding: 'same'
        }));
        model.add(tf.layers.maxPooling2d({ poolSize: 2 }));
        
        model.add(tf.layers.conv2d({
            filters: 128,
            kernelSize: 3,
            activation: 'relu',
            padding: 'same'
        }));
        model.add(tf.layers.maxPooling2d({ poolSize: 2 }));
        
        // Flatten v√† Dense layers
        model.add(tf.layers.flatten());
        model.add(tf.layers.dropout({ rate: 0.5 }));
        
        model.add(tf.layers.dense({
            units: 256,
            activation: 'relu'
        }));
        
        // Output layer - m·ªói unit ƒë·∫°i di·ªán cho m·ªôt ƒë·∫∑c tr∆∞ng
        const totalFeatures = Object.keys(this.featureTypes.aging).length +
                            Object.keys(this.featureTypes.drugDamage).length +
                            Object.keys(this.featureTypes.alcoholDamage).length +
                            Object.keys(this.featureTypes.smokingDamage).length;
                            
        model.add(tf.layers.dense({
            units: totalFeatures,
            activation: 'sigmoid' // Sigmoid cho multi-label classification
        }));
        
        return model;
    }
    
    /**
     * Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho CNN
     */
    async preprocessImage(imageElement) {
        return tf.tidy(() => {
            // Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh tensor
            let imageTensor = tf.browser.fromPixels(imageElement);
            
            // Resize v·ªÅ 224x224
            imageTensor = tf.image.resizeBilinear(imageTensor, [224, 224]);
            
            // Normalize v·ªÅ [0, 1]
            imageTensor = imageTensor.div(255.0);
            
            // Th√™m batch dimension
            return imageTensor.expandDims(0);
        });
    }
    
    /**
     * Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng t·ª´ ·∫£nh khu√¥n m·∫∑t
     */
    async extractFeatures(imageElement, effectType, years) {
        if (!this.initialized) {
            await this.initialize();
        }
        
        try {
            console.log(`üîç ƒêang tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng cho ${effectType} sau ${years} nƒÉm...`);
            
            // Ti·ªÅn x·ª≠ l√Ω ·∫£nh
            const preprocessedImage = await this.preprocessImage(imageElement);
            
            // D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh (trong th·ª±c t·∫ø, model c·∫ßn ƒë∆∞·ª£c train tr∆∞·ªõc)
            // ·ªû ƒë√¢y ta s·∫Ω m√¥ ph·ªèng k·∫øt qu·∫£ d·ª±a tr√™n rules
            const features = await this.simulateFeatureExtraction(imageElement, effectType, years);
            
            // D·ªçn d·∫πp tensor
            preprocessedImage.dispose();
            
            return features;
        } catch (error) {
            console.error('L·ªói khi tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng:', error);
            return null;
        }
    }
    
    /**
     * M√¥ ph·ªèng tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng (s·∫Ω thay b·∫±ng model th·ª±c khi c√≥ data training)
     */
    async simulateFeatureExtraction(imageElement, effectType, years) {
        // L·∫•y tr·ªçng s·ªë theo th·ªùi gian
        const timeWeight = this.getTimeWeight(years);
        
        // Ph√¢n t√≠ch m√†u da v√† texture c∆° b·∫£n
        const skinAnalysis = await this.analyzeSkinBasic(imageElement);
        
        // T·∫°o feature vector d·ª±a tr√™n lo·∫°i t√°c ƒë·ªông
        const features = {
            general: {},
            specific: {},
            severity: timeWeight,
            skinAnalysis: skinAnalysis
        };
        
        // ƒê·∫∑c tr∆∞ng l√£o h√≥a chung (xu·∫•t hi·ªán ·ªü t·∫•t c·∫£ c√°c lo·∫°i)
        features.general = {
            wrinkles: this.calculateWrinkleScore(timeWeight, effectType),
            skinTexture: this.calculateTextureScore(timeWeight, effectType),
            skinTone: this.calculateSkinToneScore(timeWeight, effectType),
            facialVolume: this.calculateVolumeScore(timeWeight, effectType)
        };
        
        // ƒê·∫∑c tr∆∞ng ri√™ng theo lo·∫°i t√°c ƒë·ªông
        switch (effectType) {
            case 'drug-effects':
                features.specific = this.extractDrugFeatures(timeWeight, skinAnalysis);
                break;
            case 'alcohol-effects':
                features.specific = this.extractAlcoholFeatures(timeWeight, skinAnalysis);
                break;
            case 'smoking-effects':
                features.specific = this.extractSmokingFeatures(timeWeight, skinAnalysis);
                break;
        }
        
        // T√≠nh ƒëi·ªÉm t·ªïng th·ªÉ
        features.overallScore = this.calculateOverallDamageScore(features);
        
        console.log('üìä ƒê·∫∑c tr∆∞ng ƒë√£ tr√≠ch xu·∫•t:', features);
        return features;
    }
    
    /**
     * Ph√¢n t√≠ch m√†u da v√† texture c∆° b·∫£n
     */
    async analyzeSkinBasic(imageElement) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        // Resize v·ªÅ k√≠ch th∆∞·ªõc nh·ªè ƒë·ªÉ x·ª≠ l√Ω nhanh
        canvas.width = 100;
        canvas.height = 100;
        ctx.drawImage(imageElement, 0, 0, 100, 100);
        
        const imageData = ctx.getImageData(0, 0, 100, 100);
        const data = imageData.data;
        
        let totalR = 0, totalG = 0, totalB = 0;
        let brightness = 0;
        let contrast = 0;
        
        // Ph√¢n t√≠ch m√†u s·∫Øc
        for (let i = 0; i < data.length; i += 4) {
            totalR += data[i];
            totalG += data[i + 1];
            totalB += data[i + 2];
            
            // T√≠nh ƒë·ªô s√°ng
            const pixelBrightness = (data[i] + data[i + 1] + data[i + 2]) / 3;
            brightness += pixelBrightness;
        }
        
        const pixelCount = data.length / 4;
        const avgR = totalR / pixelCount;
        const avgG = totalG / pixelCount;
        const avgB = totalB / pixelCount;
        const avgBrightness = brightness / pixelCount;
        
        // T√≠nh ƒë·ªô t∆∞∆°ng ph·∫£n (ƒë∆°n gi·∫£n)
        let variance = 0;
        for (let i = 0; i < data.length; i += 4) {
            const pixelBrightness = (data[i] + data[i + 1] + data[i + 2]) / 3;
            variance += Math.pow(pixelBrightness - avgBrightness, 2);
        }
        contrast = Math.sqrt(variance / pixelCount);
        
        return {
            averageColor: { r: avgR, g: avgG, b: avgB },
            brightness: avgBrightness / 255,
            contrast: contrast / 255,
            redness: avgR / (avgG + avgB) * 2, // ƒê·ªô ƒë·ªè t∆∞∆°ng ƒë·ªëi
            yellowness: (avgR + avgG) / (avgB * 2), // ƒê·ªô v√†ng t∆∞∆°ng ƒë·ªëi
            paleness: 1 - (Math.max(avgR, avgG, avgB) - Math.min(avgR, avgG, avgB)) / 255
        };
    }
    
    /**
     * T√≠nh ƒëi·ªÉm n·∫øp nhƒÉn
     */
    calculateWrinkleScore(timeWeight, effectType) {
        const baseScore = timeWeight * 0.5;
        const typeMultiplier = {
            'drug-effects': 1.2,
            'alcohol-effects': 0.8,
            'smoking-effects': 1.5
        };
        return Math.min(baseScore * (typeMultiplier[effectType] || 1), 1);
    }
    
    /**
     * T√≠nh ƒëi·ªÉm k·∫øt c·∫•u da
     */
    calculateTextureScore(timeWeight, effectType) {
        const baseScore = timeWeight * 0.6;
        const typeMultiplier = {
            'drug-effects': 1.5,
            'alcohol-effects': 1.0,
            'smoking-effects': 1.3
        };
        return Math.min(baseScore * (typeMultiplier[effectType] || 1), 1);
    }
    
    /**
     * T√≠nh ƒëi·ªÉm m√†u da
     */
    calculateSkinToneScore(timeWeight, effectType) {
        const baseScore = timeWeight * 0.7;
        const typeMultiplier = {
            'drug-effects': 1.4,
            'alcohol-effects': 1.2,
            'smoking-effects': 0.9
        };
        return Math.min(baseScore * (typeMultiplier[effectType] || 1), 1);
    }
    
    /**
     * T√≠nh ƒëi·ªÉm th·ªÉ t√≠ch khu√¥n m·∫∑t (ƒë·ªô h√≥p)
     */
    calculateVolumeScore(timeWeight, effectType) {
        const baseScore = timeWeight * 0.4;
        const typeMultiplier = {
            'drug-effects': 2.0, // Ma t√∫y g√¢y h√≥p m·∫∑t nhi·ªÅu nh·∫•t
            'alcohol-effects': 0.5, // R∆∞·ª£u g√¢y s∆∞ng ph√π
            'smoking-effects': 1.0
        };
        return Math.min(baseScore * (typeMultiplier[effectType] || 1), 1);
    }
    
    /**
     * Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng ri√™ng cho ma t√∫y
     */
    extractDrugFeatures(timeWeight, skinAnalysis) {
        return {
            faceSores: timeWeight > 0.5 ? timeWeight * 0.8 : 0,
            skinPicking: timeWeight * 0.9,
            toothDecay: timeWeight * 0.95,
            sunkenCheeks: timeWeight * 1.0,
            darkCircles: timeWeight * 0.85,
            paleSkin: Math.min(skinAnalysis.paleness + timeWeight * 0.5, 1),
            
            // ƒê·∫∑c tr∆∞ng chi ti·∫øt
            skinLesions: {
                count: Math.floor(timeWeight * 15),
                severity: timeWeight,
                healing: timeWeight < 0.3 ? 'good' : timeWeight < 0.7 ? 'moderate' : 'poor'
            },
            
            facialMuscleAtrophy: {
                cheeks: timeWeight * 0.9,
                temples: timeWeight * 0.85,
                jawline: timeWeight * 0.7
            }
        };
    }
    
    /**
     * Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng ri√™ng cho r∆∞·ª£u
     */
    extractAlcoholFeatures(timeWeight, skinAnalysis) {
        return {
            rosacea: timeWeight > 0.3 ? timeWeight * 0.9 : 0,
            spiderVeins: timeWeight * 0.8,
            puffiness: timeWeight * 0.95,
            jaundice: timeWeight > 0.6 ? timeWeight * 0.7 : 0,
            redFace: Math.min(skinAnalysis.redness + timeWeight * 0.6, 1),
            brokenCapillaries: timeWeight * 0.85,
            
            // ƒê·∫∑c tr∆∞ng chi ti·∫øt
            rhinophyma: {
                severity: timeWeight > 0.5 ? timeWeight : 0,
                noseEnlargement: timeWeight * 0.6,
                skinThickening: timeWeight * 0.7
            },
            
            liverDamage: {
                jaundiceLevel: timeWeight > 0.6 ? (timeWeight - 0.6) * 2.5 : 0,
                ascites: timeWeight > 0.8 ? 'present' : 'absent'
            }
        };
    }
    
    /**
     * Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng ri√™ng cho thu·ªëc l√°
     */
    extractSmokingFeatures(timeWeight, skinAnalysis) {
        return {
            smokersLines: timeWeight * 1.0,
            yellowTeeth: timeWeight * 0.95,
            dullSkin: Math.min(1 - skinAnalysis.brightness + timeWeight * 0.5, 1),
            leatherySkin: timeWeight > 0.5 ? timeWeight * 0.8 : 0,
            lipDiscoloration: timeWeight * 0.9,
            crowsFeet: timeWeight * 0.85,
            
            // ƒê·∫∑c tr∆∞ng chi ti·∫øt
            periOralWrinkles: {
                count: Math.floor(timeWeight * 20),
                depth: timeWeight,
                pattern: 'radial'
            },
            
            skinElasticity: {
                loss: timeWeight * 0.9,
                sagging: timeWeight * 0.7,
                thinning: timeWeight * 0.6
            }
        };
    }
    
    /**
     * T√≠nh ƒëi·ªÉm t·ªïn th∆∞∆°ng t·ªïng th·ªÉ
     */
    calculateOverallDamageScore(features) {
        // T√≠nh trung b√¨nh c√≥ tr·ªçng s·ªë c·ªßa c√°c ƒë·∫∑c tr∆∞ng
        const generalScore = Object.values(features.general).reduce((a, b) => a + b, 0) / Object.keys(features.general).length;
        const specificScore = Object.values(features.specific)
            .filter(v => typeof v === 'number')
            .reduce((a, b) => a + b, 0) / Object.values(features.specific).filter(v => typeof v === 'number').length;
        
        // K·∫øt h·ª£p v·ªõi tr·ªçng s·ªë
        return generalScore * 0.4 + specificScore * 0.6;
    }
    
    /**
     * L·∫•y tr·ªçng s·ªë theo th·ªùi gian
     */
    getTimeWeight(years) {
        if (years <= 5) return this.timeWeights[5];
        if (years <= 10) return this.timeWeights[10];
        if (years <= 15) return this.timeWeights[15];
        return this.timeWeights[20];
    }
    
    /**
     * T·∫°o b√°o c√°o chi ti·∫øt v·ªÅ t·ªïn th∆∞∆°ng
     */
    generateDamageReport(features, effectType, years) {
        const report = {
            summary: '',
            details: [],
            recommendations: [],
            visualIndicators: []
        };
        
        // T·∫°o t√≥m t·∫Øt
        const severity = features.overallScore < 0.3 ? 'nh·∫π' : 
                        features.overallScore < 0.6 ? 'trung b√¨nh' :
                        features.overallScore < 0.8 ? 'n·∫∑ng' : 'r·∫•t n·∫∑ng';
                        
        report.summary = `Sau ${years} nƒÉm s·ª≠ d·ª•ng ${this.getSubstanceName(effectType)}, khu√¥n m·∫∑t cho th·∫•y d·∫•u hi·ªáu t·ªïn th∆∞∆°ng ${severity}.`;
        
        // Chi ti·∫øt t·ªïn th∆∞∆°ng
        if (features.general.wrinkles > 0.5) {
            report.details.push(`N·∫øp nhƒÉn: ${this.getScoreDescription(features.general.wrinkles)}`);
        }
        
        if (features.general.skinTexture > 0.5) {
            report.details.push(`K·∫øt c·∫•u da: ${this.getScoreDescription(features.general.skinTexture)}`);
        }
        
        // Th√™m chi ti·∫øt ri√™ng theo lo·∫°i
        this.addSpecificDetails(report, features.specific, effectType);
        
        // Khuy·∫øn ngh·ªã
        if (features.overallScore > 0.7) {
            report.recommendations.push('C·∫ßn can thi·ªáp y t·∫ø kh·∫©n c·∫•p');
            report.recommendations.push('Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© da li·ªÖu');
        }
        
        // Ch·ªâ b√°o tr·ª±c quan cho vi·ªác render
        report.visualIndicators = this.getVisualIndicators(features, effectType);
        
        return report;
    }
    
    /**
     * L·∫•y t√™n ch·∫•t g√¢y nghi·ªán
     */
    getSubstanceName(effectType) {
        const names = {
            'drug-effects': 'ma t√∫y',
            'alcohol-effects': 'r∆∞·ª£u bia',
            'smoking-effects': 'thu·ªëc l√°'
        };
        return names[effectType] || 'ch·∫•t g√¢y nghi·ªán';
    }
    
    /**
     * M√¥ t·∫£ m·ª©c ƒë·ªô d·ª±a tr√™n ƒëi·ªÉm s·ªë
     */
    getScoreDescription(score) {
        if (score < 0.3) return 'nh·∫π';
        if (score < 0.5) return 'v·ª´a ph·∫£i';
        if (score < 0.7) return 'ƒë√°ng k·ªÉ';
        if (score < 0.9) return 'nghi√™m tr·ªçng';
        return 'r·∫•t nghi√™m tr·ªçng';
    }
    
    /**
     * Th√™m chi ti·∫øt ri√™ng theo lo·∫°i t√°c ƒë·ªông
     */
    addSpecificDetails(report, specific, effectType) {
        switch (effectType) {
            case 'drug-effects':
                if (specific.faceSores > 0) {
                    report.details.push(`V·∫øt lo√©t tr√™n m·∫∑t: ${specific.skinLesions.count} v·∫øt, m·ª©c ƒë·ªô ${this.getScoreDescription(specific.skinLesions.severity)}`);
                }
                if (specific.sunkenCheeks > 0.5) {
                    report.details.push(`M√° h√≥p: m·ª©c ƒë·ªô ${this.getScoreDescription(specific.sunkenCheeks)}`);
                }
                break;
                
            case 'alcohol-effects':
                if (specific.rhinophyma.severity > 0) {
                    report.details.push(`M≈©i ƒë·ªè t√≠m: m·ª©c ƒë·ªô ${this.getScoreDescription(specific.rhinophyma.severity)}`);
                }
                if (specific.liverDamage.jaundiceLevel > 0) {
                    report.details.push(`V√†ng da do t·ªïn th∆∞∆°ng gan: m·ª©c ƒë·ªô ${this.getScoreDescription(specific.liverDamage.jaundiceLevel)}`);
                }
                break;
                
            case 'smoking-effects':
                if (specific.periOralWrinkles.count > 10) {
                    report.details.push(`N·∫øp nhƒÉn quanh mi·ªáng: ${specific.periOralWrinkles.count} n·∫øp, ƒë·ªô s√¢u ${this.getScoreDescription(specific.periOralWrinkles.depth)}`);
                }
                if (specific.skinElasticity.loss > 0.5) {
                    report.details.push(`M·∫•t ƒë·ªô ƒë√†n h·ªìi da: ${this.getScoreDescription(specific.skinElasticity.loss)}`);
                }
                break;
        }
    }
    
    /**
     * L·∫•y ch·ªâ b√°o tr·ª±c quan ƒë·ªÉ render
     */
    getVisualIndicators(features, effectType) {
        const indicators = [];
        
        // Ch·ªâ b√°o chung
        if (features.general.wrinkles > 0.5) {
            indicators.push({
                type: 'wrinkles',
                areas: ['forehead', 'eye_corners', 'mouth'],
                intensity: features.general.wrinkles
            });
        }
        
        // Ch·ªâ b√°o ri√™ng
        switch (effectType) {
            case 'drug-effects':
                if (features.specific.faceSores > 0) {
                    indicators.push({
                        type: 'sores',
                        count: features.specific.skinLesions.count,
                        areas: ['cheeks', 'forehead', 'chin'],
                        intensity: features.specific.skinLesions.severity
                    });
                }
                break;
                
            case 'alcohol-effects':
                if (features.specific.spiderVeins > 0) {
                    indicators.push({
                        type: 'spider_veins',
                        areas: ['nose', 'cheeks'],
                        intensity: features.specific.spiderVeins
                    });
                }
                break;
                
            case 'smoking-effects':
                if (features.specific.smokersLines > 0) {
                    indicators.push({
                        type: 'vertical_lines',
                        areas: ['upper_lip', 'lower_lip'],
                        intensity: features.specific.smokersLines
                    });
                }
                break;
        }
        
        return indicators;
    }
}

// Export module
window.CNNFeatureExtractor = CNNFeatureExtractor; 